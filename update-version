#!/bin/bash

##
## A generic script to modify a version number.
##
## Examples:
## update-version 1.2.3 #> 1.2.3
## update-version 1.2.3 +patch #> 1.2.4
## update-version 1.2.3 +major +minor +patch > 2.3.4
## 
## Modifiers can be in the version number to alter output.
##
## Modifiers override +major, +minor and +patch
##
## # zero reset modifier (~) - reset a component to 0
## update-version 1.2.~ #> 1.2.0
## update-version ~.~.~ #> 0.0.0
## update-version 1.~.3 #> 1.0.3
## update-version 1.~.3 +patch #>1.0.3
## 
## # force modifier (!) - don't update anything
## update-version !2.0.0 #> 2.0.0
## update-version !1.2.3 #> 1.2.3
## update-version !2.3.0 +patch #> 2.3.0
##
## # Version tags are allowed
## 
## update-version 1.2.3-alpha1 +patch #> 1.2.4-alpha1
## update-version 1.~.3-alpha1 +patch #> 1.0.4-alpha1
## update-version !1.~.~ #> 1.0.0
##
## ## Printing Version Info
## 
## update-version 1.2.3 --print-minor #> 2
## update-version 1.2.3 --print-major #> 1
## update-version 1.2.3 --print-patch #> 3
## update-version 1.2.3-alpha1 --print-tag #> -alpha1
##
## ## Printing with Modifiers
##
## Modifiers are applied before printing a component.
##
## update-version 1.2.3 --print-minor +minor #> 3
## update-version 1.~.3 --print-minor +minor #> 0
## update-version !1.2.3 --print-minor +minor #> 2
##

#modifier characters
FORCE_MODIFIER="!"
ZERO_MODIFIER="~"

getShebang() {
	if [ -z "$1" ]; then
		echo ''
		return
	fi
	version=$1
	shebang=$(echo $version | python -c '
import re,sys;patch=re.search("^('"${FORCE_MODIFIER}"')?",sys.stdin.read());
if patch.group(1): print patch.group(1)
else: print ''')
	echo $shebang
}

getMajor() {
	if [ -z "$1" ]; then
		echo ''
		return
	fi
	version=$1
	major=$(echo $version | python -c '
import re,sys;patch=re.search("^('"${FORCE_MODIFIER}"')?([0-9]*'"${ZERO_MODIFIER}"'?)\.",sys.stdin.read());
print patch.group(2)')
	echo $major
}

getMinor() {
	if [ -z "$1" ]; then
		echo ''
		return
	fi
	version=$1
	minor=$(echo $version | python -c '
import re,sys;patch=re.search("^('"${FORCE_MODIFIER}"')?([0-9]*'"${ZERO_MODIFIER}"'?)\.([0-9]*'"${ZERO_MODIFIER}"'?)\.",sys.stdin.read());
print patch.group(3)')
	echo $minor
}

getPatch() {
	if [ -z "$1" ]; then
		echo ''
		return
	fi
	version=$1
	patch=$(echo $version | python -c '
import re,sys;
patch=re.search("^('"${FORCE_MODIFIER}"')?([0-9]*'"${ZERO_MODIFIER}"'?)\.([0-9]*'"${ZERO_MODIFIER}"'?)\.([0-9]*'"${ZERO_MODIFIER}"'?)",sys.stdin.read());
print patch.group(4)')
	echo $patch
}

getTag() {
	if [ -z "$1" ]; then
		echo ''
		return
	fi
	version=$1
	tag=$(echo $version | python -c '
import re,sys;
patch=re.search("('"${FORCE_MODIFIER}"')?([0-9]*'"${ZERO_MODIFIER}"'?)\.([0-9]*'"${ZERO_MODIFIER}"'?)\.([0-9]*'"${ZERO_MODIFIER}"'?)([\.\_\-\+0-9a-zA-Z]*)?",sys.stdin.read());
print patch.group(5)')
	echo $tag
}

assert() {
	echo "assert $1 == $2"
	if [ "$1" != "$2" ]; then
		echo "Assert fail $1 != $2"
		exit 1
	fi
}

if [ "$1" = '--tests' ] || [ "$1" = '--test' ]; then
	echo "Testing..."

	VERSION='1.2.3'
	SHEBANG=$(getShebang $VERSION)
	MAJOR=$(getMajor $VERSION)
	MINOR=$(getMinor $VERSION)
	PATCH=$(getPatch $VERSION)
	TAG=$(getTag $VERSION)
	assert $SHEBANG ''
	assert $MAJOR '1'
	assert $MINOR '2'
	assert $PATCH '3'
	assert $TAG ''

	VERSION='10.20.30'
	SHEBANG=$(getShebang $VERSION)
	MAJOR=$(getMajor $VERSION)
	MINOR=$(getMinor $VERSION)
	PATCH=$(getPatch $VERSION)
	TAG=$(getTag $VERSION)
	assert $SHEBANG ''
	assert $MAJOR '10'
	assert $MINOR '20'
	assert $PATCH '30'
	assert $TAG ''

	VERSION='100.200.300'
	SHEBANG=$(getShebang $VERSION)
	MAJOR=$(getMajor $VERSION)
	MINOR=$(getMinor $VERSION)
	PATCH=$(getPatch $VERSION)
	TAG=$(getTag $VERSION)
	assert $SHEBANG ''
	assert $MAJOR '100'
	assert $MINOR '200'
	assert $PATCH '300'
	assert $TAG ''

	VERSION='!1.2.3'
	SHEBANG=$(getShebang $VERSION)
	MAJOR=$(getMajor $VERSION)
	MINOR=$(getMinor $VERSION)
	PATCH=$(getPatch $VERSION)
	TAG=$(getTag $VERSION)
	assert $SHEBANG '!'
	assert $MAJOR '1'
	assert $MINOR '2'
	assert $PATCH '3'
	assert $TAG ''

	VERSION='!1.2.3-alpha'
	SHEBANG=$(getShebang $VERSION)
	MAJOR=$(getMajor $VERSION)
	MINOR=$(getMinor $VERSION)
	PATCH=$(getPatch $VERSION)
	TAG=$(getTag $VERSION)
	assert $SHEBANG '!'
	assert $MAJOR '1'
	assert $MINOR '2'
	assert $PATCH '3'
	assert $TAG '-alpha'

	VERSION='!~.2.3'
	SHEBANG=$(getShebang $VERSION)
	MAJOR=$(getMajor $VERSION)
	MINOR=$(getMinor $VERSION)
	PATCH=$(getPatch $VERSION)
	TAG=$(getTag $VERSION)
	assert $SHEBANG '!'
	assert $MAJOR '~'
	assert $MINOR '2'
	assert $PATCH '3'
	assert $TAG ''

	VERSION='!~.2.3-alpha'
	SHEBANG=$(getShebang $VERSION)
	MAJOR=$(getMajor $VERSION)
	MINOR=$(getMinor $VERSION)
	PATCH=$(getPatch $VERSION)
	TAG=$(getTag $VERSION)
	assert $SHEBANG '!'
	assert $MAJOR '~'
	assert $MINOR '2'
	assert $PATCH '3'
	assert $TAG '-alpha'

	VERSION='!~.~.3'
	SHEBANG=$(getShebang $VERSION)
	MAJOR=$(getMajor $VERSION)
	MINOR=$(getMinor $VERSION)
	PATCH=$(getPatch $VERSION)
	TAG=$(getTag $VERSION)
	assert $SHEBANG '!'
	assert $MAJOR '~'
	assert $MINOR '~'
	assert $PATCH '3'
	assert $TAG ''

	VERSION='!~.~.3-alpha'
	SHEBANG=$(getShebang $VERSION)
	MAJOR=$(getMajor $VERSION)
	MINOR=$(getMinor $VERSION)
	PATCH=$(getPatch $VERSION)
	TAG=$(getTag $VERSION)
	assert $SHEBANG '!'
	assert $MAJOR '~'
	assert $MINOR '~'
	assert $PATCH '3'
	assert $TAG '-alpha'

	VERSION='!~.~.~'
	SHEBANG=$(getShebang $VERSION)
	MAJOR=$(getMajor $VERSION)
	MINOR=$(getMinor $VERSION)
	PATCH=$(getPatch $VERSION)
	TAG=$(getTag $VERSION)
	assert $SHEBANG '!'
	assert $MAJOR '~'
	assert $MINOR '~'
	assert $PATCH '~'
	assert $TAG ''

	VERSION='!~.~.~-alpha'
	SHEBANG=$(getShebang $VERSION)
	MAJOR=$(getMajor $VERSION)
	MINOR=$(getMinor $VERSION)
	PATCH=$(getPatch $VERSION)
	TAG=$(getTag $VERSION)
	assert $SHEBANG '!'
	assert $MAJOR '~'
	assert $MINOR '~'
	assert $PATCH '~'
	assert $TAG '-alpha'

	VERSION='~.2.3'
	SHEBANG=$(getShebang $VERSION)
	MAJOR=$(getMajor $VERSION)
	MINOR=$(getMinor $VERSION)
	PATCH=$(getPatch $VERSION)
	TAG=$(getTag $VERSION)
	assert $SHEBANG ''
	assert $MAJOR '~'
	assert $MINOR '2'
	assert $PATCH '3'
	assert $TAG ''

	VERSION='~.2.3-alpha'
	SHEBANG=$(getShebang $VERSION)
	MAJOR=$(getMajor $VERSION)
	MINOR=$(getMinor $VERSION)
	PATCH=$(getPatch $VERSION)
	TAG=$(getTag $VERSION)
	assert $SHEBANG ''
	assert $MAJOR '~'
	assert $MINOR '2'
	assert $PATCH '3'
	assert $TAG '-alpha'

	VERSION='~.~.3'
	SHEBANG=$(getShebang $VERSION)
	MAJOR=$(getMajor $VERSION)
	MINOR=$(getMinor $VERSION)
	PATCH=$(getPatch $VERSION)
	TAG=$(getTag $VERSION)
	assert $SHEBANG ''
	assert $MAJOR '~'
	assert $MINOR '~'
	assert $PATCH '3'
	assert $TAG ''

	VERSION='~.~.3-alpha'
	SHEBANG=$(getShebang $VERSION)
	MAJOR=$(getMajor $VERSION)
	MINOR=$(getMinor $VERSION)
	PATCH=$(getPatch $VERSION)
	TAG=$(getTag $VERSION)
	assert $SHEBANG ''
	assert $MAJOR '~'
	assert $MINOR '~'
	assert $PATCH '3'
	assert $TAG '-alpha'

	VERSION='~.~.~'
	SHEBANG=$(getShebang $VERSION)
	MAJOR=$(getMajor $VERSION)
	MINOR=$(getMinor $VERSION)
	PATCH=$(getPatch $VERSION)
	TAG=$(getTag $VERSION)
	assert $SHEBANG ''
	assert $MAJOR '~'
	assert $MINOR '~'
	assert $PATCH '~'
	assert $TAG ''

	VERSION='~.~.~-alpha'
	SHEBANG=$(getShebang $VERSION)
	MAJOR=$(getMajor $VERSION)
	MINOR=$(getMinor $VERSION)
	PATCH=$(getPatch $VERSION)
	TAG=$(getTag $VERSION)
	assert $SHEBANG ''
	assert $MAJOR '~'
	assert $MINOR '~'
	assert $PATCH '~'
	assert $TAG '-alpha'

	VERSION='1.2.~'
	SHEBANG=$(getShebang $VERSION)
	MAJOR=$(getMajor $VERSION)
	MINOR=$(getMinor $VERSION)
	PATCH=$(getPatch $VERSION)
	TAG=$(getTag $VERSION)
	assert $SHEBANG ''
	assert $MAJOR '1'
	assert $MINOR '2'
	assert $PATCH '~'
	assert $TAG ''

	VERSION='1.2.~-alpha'
	SHEBANG=$(getShebang $VERSION)
	MAJOR=$(getMajor $VERSION)
	MINOR=$(getMinor $VERSION)
	PATCH=$(getPatch $VERSION)
	TAG=$(getTag $VERSION)
	assert $SHEBANG ''
	assert $MAJOR '1'
	assert $MINOR '2'
	assert $PATCH '~'
	assert $TAG '-alpha'

	VERSION='1.~.~'
	SHEBANG=$(getShebang $VERSION)
	MAJOR=$(getMajor $VERSION)
	MINOR=$(getMinor $VERSION)
	PATCH=$(getPatch $VERSION)
	TAG=$(getTag $VERSION)
	assert $SHEBANG ''
	assert $MAJOR '1'
	assert $MINOR '~'
	assert $PATCH '~'
	assert $TAG ''

	VERSION='1.~.~-alpha'
	SHEBANG=$(getShebang $VERSION)
	MAJOR=$(getMajor $VERSION)
	MINOR=$(getMinor $VERSION)
	PATCH=$(getPatch $VERSION)
	TAG=$(getTag $VERSION)
	assert $SHEBANG ''
	assert $MAJOR '1'
	assert $MINOR '~'
	assert $PATCH '~'
	assert $TAG '-alpha'

	VERSION='!1.2.~+alpha'
	SHEBANG=$(getShebang $VERSION)
	MAJOR=$(getMajor $VERSION)
	MINOR=$(getMinor $VERSION)
	PATCH=$(getPatch $VERSION)
	TAG=$(getTag $VERSION)
	assert $SHEBANG '!'
	assert $MAJOR '1'
	assert $MINOR '2'
	assert $PATCH '~'
	assert $TAG '+alpha'

	VERSION='1.2.~+alpha'
	SHEBANG=$(getShebang $VERSION)
	MAJOR=$(getMajor $VERSION)
	MINOR=$(getMinor $VERSION)
	PATCH=$(getPatch $VERSION)
	TAG=$(getTag $VERSION)
	assert $SHEBANG ''
	assert $MAJOR '1'
	assert $MINOR '2'
	assert $PATCH '~'
	assert $TAG '+alpha'

	VERSION='1.2.~+-alpha.123'
	SHEBANG=$(getShebang $VERSION)
	MAJOR=$(getMajor $VERSION)
	MINOR=$(getMinor $VERSION)
	PATCH=$(getPatch $VERSION)
	TAG=$(getTag $VERSION)
	assert $SHEBANG ''
	assert $MAJOR '1'
	assert $MINOR '2'
	assert $PATCH '~'
	assert $TAG '+-alpha.123'

	VERSION='1.2.~-+alpha.123'
	SHEBANG=$(getShebang $VERSION)
	MAJOR=$(getMajor $VERSION)
	MINOR=$(getMinor $VERSION)
	PATCH=$(getPatch $VERSION)
	TAG=$(getTag $VERSION)
	assert $SHEBANG ''
	assert $MAJOR '1'
	assert $MINOR '2'
	assert $PATCH '~'
	assert $TAG '-+alpha.123'

	VERSION='1.2.~-+alpha.123-beta.94AF'
	SHEBANG=$(getShebang $VERSION)
	MAJOR=$(getMajor $VERSION)
	MINOR=$(getMinor $VERSION)
	PATCH=$(getPatch $VERSION)
	TAG=$(getTag $VERSION)
	assert $SHEBANG ''
	assert $MAJOR '1'
	assert $MINOR '2'
	assert $PATCH '~'
	assert $TAG '-+alpha.123-beta.94AF'

	VERSION='1.2.~-+alpha.123-beta.94AF_A4fF.098-5'
	SHEBANG=$(getShebang $VERSION)
	MAJOR=$(getMajor $VERSION)
	MINOR=$(getMinor $VERSION)
	PATCH=$(getPatch $VERSION)
	TAG=$(getTag $VERSION)
	assert $SHEBANG ''
	assert $MAJOR '1'
	assert $MINOR '2'
	assert $PATCH '~'
	assert $TAG '-+alpha.123-beta.94AF_A4fF.098-5'

	VERSION='1.2.~_-+alpha.123-beta.94AF_A4fF.098-5'
	SHEBANG=$(getShebang $VERSION)
	MAJOR=$(getMajor $VERSION)
	MINOR=$(getMinor $VERSION)
	PATCH=$(getPatch $VERSION)
	TAG=$(getTag $VERSION)
	assert $SHEBANG ''
	assert $MAJOR '1'
	assert $MINOR '2'
	assert $PATCH '~'
	assert $TAG '_-+alpha.123-beta.94AF_A4fF.098-5'

	VERSION='1.2.~A40-+alpha.123-beta.94AF_A4fF.098-5'
	SHEBANG=$(getShebang $VERSION)
	MAJOR=$(getMajor $VERSION)
	MINOR=$(getMinor $VERSION)
	PATCH=$(getPatch $VERSION)
	TAG=$(getTag $VERSION)
	assert $SHEBANG ''
	assert $MAJOR '1'
	assert $MINOR '2'
	assert $PATCH '~'
	assert $TAG 'A40-+alpha.123-beta.94AF_A4fF.098-5'

	VERSION='1.2.~.129FAD'
	SHEBANG=$(getShebang $VERSION)
	MAJOR=$(getMajor $VERSION)
	MINOR=$(getMinor $VERSION)
	PATCH=$(getPatch $VERSION)
	TAG=$(getTag $VERSION)
	assert $SHEBANG ''
	assert $MAJOR '1'
	assert $MINOR '2'
	assert $PATCH '~'
	assert $TAG '.129FAD'

	output=$(./$0 1.2.3)
	assert $output "1.2.3"

	output=$(./$0 1.2.3 +major)
	assert $output "2.2.3"

	output=$(./$0 1.2.3 +minor)
	assert $output "1.3.3"

	output=$(./$0 1.2.3 +patch)
	assert $output "1.2.4"

	output=$(./$0 1.2.3 +major +minor)
	assert $output "2.3.3"

	output=$(./$0 1.2.3 +major +patch)
	assert $output "2.2.4"

	output=$(./$0 1.2.3 +minor +patch)
	assert $output "1.3.4"

	output=$(./$0 1.2.3 +major +minor +patch)
	assert $output "2.3.4"

	output=$(./$0 "~.2.3")
	assert $output "0.2.3"

	output=$(./$0 "~.~.3")
	assert $output "0.0.3"

	output=$(./$0 "~.~.~")
	assert $output "0.0.0"

	output=$(./$0 "!1.2.3")
	assert $output "1.2.3"

	output=$(./$0 "!1.2.3" +major)
	assert $output "1.2.3"

	output=$(./$0 "!1.2.3" +minor)
	assert $output "1.2.3"

	output=$(./$0 "!1.2.3" +patch)
	assert $output "1.2.3"

	output=$(./$0 "!1.2.3" +major +minor)
	assert $output "1.2.3"

	output=$(./$0 "!1.2.3" +major +patch)
	assert $output "1.2.3"

	output=$(./$0 "!1.2.3" +minor +patch)
	assert $output "1.2.3"

	output=$(./$0 "!1.2.3" +major +minor +patch)
	assert $output "1.2.3"

	output=$(./$0 "!~.2.3" +major)
	assert $output "0.2.3"

	output=$(./$0 "!1.~.3" +minor)
	assert $output "1.0.3"

	output=$(./$0 "!1.2.~" +patch)
	assert $output "1.2.0"

	output=$(./$0 "!~.~.~-alpha" +patch)
	assert $output "0.0.0-alpha"

	output=$(./$0 "!~.~.~+alpha" +patch)
	assert $output "0.0.0+alpha"

	output=$(./$0 "!~.~.~+-alpha" +patch)
	assert $output "0.0.0+-alpha"

	output=$(./$0 "!~.~.~_+-alpha" +patch)
	assert $output "0.0.0_+-alpha"

	output=$(./$0 "!~.~.~._+-alpha" +patch)
	assert $output "0.0.0._+-alpha"

	output=$(./$0 "!~.~.~.129AFD" +patch)
	assert $output "0.0.0.129AFD"

	output=$(./$0 "1.1.1.129AFD" +patch)
	assert $output "1.1.2.129AFD"

	output=$(./$0  "1.2.3" --print-patch)
	assert $output "3"

	output=$(./$0  "1.2.3" --print-major)
	assert $output "1"

	output=$(./$0  "1.2.3" --print-minor)
	assert $output "2"

	output=$(./$0  "1.2.3-alpha1.0934" --print-tag)
	assert $output "-alpha1.0934"

	output=$(./$0  "1.2.3.128AFD" --print-tag)
	assert $output ".128AFD"

	output=$(./$0 "1.~.3" --print-minor)
	assert $output "0"

	output=$(./$0 "!1.~.2" --print-minor +minor)
	assert $output "0"

	output=$(./$0 "1.1.~" --print-patch +patch)
	assert $output "0"

	output=$(./$0 "1.2.3" +patch --print-patch)
	assert $output "4"

	output=$(./$0 "1.2.3" --print-patch +patch)
	assert $output "4"

	#TODO: add tests that should fail

	echo "all tests passed"
	exit
fi

#grab version from args
VERSION=$1
#TODO: Validate VERSION matches regex

#set default vars
INC_MAJOR=false
INC_MINOR=false
INC_PATCH=false

#print vars
PRINT_MAJOR=false
PRINT_MINOR=false
PRINT_PATCH=false
PRINT_TAG=false

#parse args
for i in "$@"
do
	case "$i" in
	+major|^major)
		INC_MAJOR=true
		;;
	+minor|^minor)
		INC_MINOR=true
		;;
	+patch|^patch)
		INC_PATCH=true
		;;
	--print-major)
		PRINT_MAJOR=true
		;;
	--print-minor)
		PRINT_MINOR=true
		;;
	--print-patch)
		PRINT_PATCH=true
		;;
	--print-tag)
		PRINT_TAG=true
		;;
	esac
done

#grab components from version
SHEBANG=$(getShebang $VERSION)
MAJOR=$(getMajor $VERSION)
MINOR=$(getMinor $VERSION)
PATCH=$(getPatch $VERSION)
TAG=$(getTag $VERSION)

NEW_MAJOR=$MAJOR
NEW_MINOR=$MINOR
NEW_PATCH=$PATCH
MAJOR_ZEROED=''
MINOR_ZEROED=''
PATCH_ZEROED=''

#check for ~ to reset major to 0
if [ "${MAJOR}" = "${ZERO_MODIFIER}" ]; then
	NEW_MAJOR='0'
	MAJOR_ZEROED='true'
fi

#check for ~ to reset minor to 0
if [ "${MINOR}" = "${ZERO_MODIFIER}" ]; then
	NEW_MINOR='0'
	MINOR_ZEROED='true'
fi

#check for ~ to reset patch to 0
if [ "${NEW_PATCH}" = "${ZERO_MODIFIER}" ]; then
	NEW_PATCH='0'
	PATCH_ZEROED='true'
fi

#increment major if shebang isn't present
if [ "$INC_MAJOR" = 'true' ] && [ -z $SHEBANG ] && [ -z $MAJOR_ZEROED ]; then
	NEW_MAJOR=$(($NEW_MAJOR + 1))
fi

#increment minor if shebang isn't present
if [ "$INC_MINOR" = 'true' ] && [ -z $SHEBANG ] && [ -z $MINOR_ZEROED ]; then
	NEW_MINOR=$(($NEW_MINOR + 1))
fi

#increment patch if shebang isn't present
if [ "$INC_PATCH" = "true" ] && [ -z $SHEBANG ] && [ -z $PATCH_ZEROED ]; then
	NEW_PATCH=$(($NEW_PATCH + 1))
fi

if [ "$PRINT_MAJOR" = true ]; then
	echo $NEW_MAJOR
	exit 0;
fi

if [ "$PRINT_MINOR" = true ]; then
	echo $NEW_MINOR
	exit 0
fi

if [ "$PRINT_PATCH" = true ]; then
	echo $NEW_PATCH
	exit 0
fi

if [ "$PRINT_TAG" = true ]; then
	echo $TAG
	exit 0
fi

#create new version
if [ "${TAG}" ]; then
	echo "${NEW_MAJOR}.${NEW_MINOR}.${NEW_PATCH}${TAG}"
else
	echo "${NEW_MAJOR}.${NEW_MINOR}.${NEW_PATCH}"
fi
